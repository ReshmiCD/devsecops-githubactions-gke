name: JAVA DevSecOps with GHA - Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{secrets.GKE_PROJECT}}
  GKE_CLUSTER: devsecops-cluster
  GKE_ZONE: asia-south1
  DEPLOYMENT_NAME: devsecops-githubactions-gke
  IMAGE: devsecops-githubactions-gke-image
  TAG: 1.0.0

jobs:
  setup-build-publish-deploy:
    name: Setup Build Publish Deploy
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Java 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          server-id: github
          settings-path: ${{ github.workspace }}
          
      - name: SIS-Trufflehog-actions-scan
        uses: nasa-gibs/trufflehog-actions-scan@master
        
      - name: SIS-Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: SIS-Trufflehog report
           path: ${{github.workspace}}/

      - name: SCA-Downloading Dependency check tool
        run: wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.2.2/dependency-check-6.2.2-release.zip 

      - name: SCA-Unzipping archive and installing
        run: unzip dependency-check-6.2.2-release.zip && ls -l && dependency-check/bin/dependency-check.sh -s .
          
      - name: SCA-Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: SCA-Depcheck report
           path: ${{github.workspace}}/
           
        # Initializes the CodeQL tools for scanning.
      - name: ACR-Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
         languages: Java
         config-file: ./.github/codeql/codeql-config.yml

      - name: ACR-CoqeQLAutobuild
        uses: github/codeql-action/autobuild@v1

      - name: ACR-Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
        
      - name: ACR-Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: ACR-CodeQL report
           path: ${{github.workspace}}/  
        
      
      - name: SAST-Sonar Scanner Cache packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: SAST- Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: SAST-Sonar Cloud Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ReshmiCD_devsecops-githubactions-gke -DskipTests  
      
      - name: SAST-Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: SAST-Sonar Scanner report
           path: ${{github.workspace}}/
           
      - name: Build with Maven
        run: mvn clean package -DskipTests
        
      - name: Setup Google Cloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{secrets.GKE_SA_KEY}}
          project_id: ${{secrets.GKE_PROJECT}}

      - name: Configure Docker
        run: |-
          gcloud --quiet auth configure-docker
          
      - name: Get GKE Credentials
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_ZONE"
          
      - name: Build Docker Image
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$IMAGE:$TAG" .

      - name: Publish Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$TAG"

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Deploy Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide  
             
      - name: Deploy Sanity -Install Google Chrome # Using shell script to install Google Chrome
        run: |-
          chmod +x ./scripts/InstallChrome.sh
                ./scripts/InstallChrome.sh
                
      - name: Deploy Sanity -Test with Selenium
        run: mvn test --file pom.xml

      - name: Selenium-Test Reporter
        uses: dorny/test-reporter@v1.4.3
        with:  
          name: Selenium report
          path: "**/surefire-reports/TEST-*.xml"
          reporter: java-junit
          
      - name: DAST:ZAP scan 
        run: |
         chmod +x ./zap-script.sh
         ./zap-script.sh
        shell: bash

      - name: DAST:Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: zap report
          path: ${{github.workspace}}/  
